<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema 

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="symbol.InitialImage" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        KS15AwAAAABJRU5ErkJggg==
</value>
  </data>
</root>